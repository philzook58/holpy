(set-info :smt-lib-version 2.6)
(set-logic QF_BV)
(set-info :source |
Generated by: Alexey Vishnyakov, Andrey Fedotov, Daniil Kuts, Alexander Novikov, Darya Parygina, Eli Kobrin, Vlada Logunova, Pavel Belecky, Shamil Kurmangaleev
Generated on: 2021-02-19
Generator: Sydr: Cutting Edge Dynamic Symbolic Execution https://arxiv.org/abs/2011.09269
           Triton framework inside https://triton.quarkslab.com/
Application: Dynamic symbolic execution
Target solver: Yices 2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun file_file.ppm_3 () (_ BitVec 8))
(declare-fun file_file.ppm_4 () (_ BitVec 8))
(declare-fun file_file.ppm_6 () (_ BitVec 8))
(declare-fun file_file.ppm_7 () (_ BitVec 8))
(define-fun ref!3 () (_ BitVec 8) file_file.ppm_3) ; Byte reference
(define-fun ref!4 () (_ BitVec 8) file_file.ppm_4) ; Byte reference
(define-fun ref!6 () (_ BitVec 8) file_file.ppm_6) ; Byte reference
(define-fun ref!7 () (_ BitVec 8) file_file.ppm_7) ; Byte reference
(define-fun ref!4450 () (_ BitVec 32) ((_ zero_extend 24) ref!3)) ; Extended part - MOVZX operation - 0x7f345a7560b5: movzx esi, byte ptr [rax]
(define-fun ref!4453 () (_ BitVec 64) ((_ zero_extend 32) ref!4450)) ; MOV operation - 0x7f345a756107: mov eax, esi
(define-fun ref!4455 () (_ BitVec 32) (bvsub ref!4450 (_ bv35 32))) ; CMP operation - 0x402448: cmp eax, 0x23
(define-fun ref!4461 () (_ BitVec 1) (ite (= ref!4455 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x402448: cmp eax, 0x23
(define-fun ref!4464 () (_ BitVec 32) (bvsub ref!4450 (_ bv4294967295 32))) ; CMP operation - 0x40244d: cmp eax, -1
(define-fun ref!4470 () (_ BitVec 1) (ite (= ref!4464 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x40244d: cmp eax, -1
(define-fun ref!4473 () (_ BitVec 32) (bvsub ref!4450 (_ bv9 32))) ; CMP operation - 0x402452: cmp eax, 9
(define-fun ref!4479 () (_ BitVec 1) (ite (= ref!4473 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x402452: cmp eax, 9
(define-fun ref!4482 () (_ BitVec 32) (bvsub ref!4450 (_ bv32 32))) ; CMP operation - 0x402457: cmp eax, 0x20
(define-fun ref!4488 () (_ BitVec 1) (ite (= ref!4482 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x402457: cmp eax, 0x20
(define-fun ref!4491 () (_ BitVec 32) (bvsub ref!4450 (_ bv13 32))) ; CMP operation - 0x40245c: cmp eax, 0xd
(define-fun ref!4497 () (_ BitVec 1) (ite (= ref!4491 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x40245c: cmp eax, 0xd
(define-fun ref!4500 () (_ BitVec 32) (bvsub ref!4450 (_ bv10 32))) ; CMP operation - 0x402461: cmp eax, 0xa
(define-fun ref!4506 () (_ BitVec 1) (ite (= ref!4500 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x402461: cmp eax, 0xa
(define-fun ref!4509 () (_ BitVec 32) ((_ extract 31 0) (bvadd (_ bv18446744073709551568 64) ref!4453))) ; Extended part - LEA operation - 0x402466: lea ebx, [rax - 0x30]
(define-fun ref!4510 () (_ BitVec 64) ((_ zero_extend 32) ref!4509)) ; LEA operation - 0x402466: lea ebx, [rax - 0x30]
(define-fun ref!4512 () (_ BitVec 32) (bvsub ref!4509 (_ bv9 32))) ; CMP operation - 0x402469: cmp ebx, 9
(define-fun ref!4514 () (_ BitVec 1) ((_ extract 31 31) (bvxor (bvxor ref!4509 (bvxor (_ bv9 32) ref!4512)) (bvand (bvxor ref!4509 ref!4512) (bvxor ref!4509 (_ bv9 32)))))) ; Carry flag - 0x402469: cmp ebx, 9
(define-fun ref!4518 () (_ BitVec 1) (ite (= ref!4512 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x402469: cmp ebx, 9
(define-fun ref!4522 () (_ BitVec 8) ((_ extract 63 56) ref!4510)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4523 () (_ BitVec 8) ((_ extract 55 48) ref!4510)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4524 () (_ BitVec 8) ((_ extract 47 40) ref!4510)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4525 () (_ BitVec 8) ((_ extract 39 32) ref!4510)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4526 () (_ BitVec 8) ((_ extract 31 24) (bvadd (_ bv18446744073709551568 64) ref!4453))) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4527 () (_ BitVec 8) ((_ extract 23 16) (bvadd (_ bv18446744073709551568 64) ref!4453))) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4528 () (_ BitVec 8) ((_ extract 15 8) (bvadd (_ bv18446744073709551568 64) ref!4453))) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4529 () (_ BitVec 8) ((_ extract 7 0) (bvadd (_ bv18446744073709551568 64) ref!4453))) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4548 () (_ BitVec 32) ((_ zero_extend 24) ref!4)) ; Extended part - MOVZX operation - 0x7f345a7560b5: movzx esi, byte ptr [rax]
(define-fun ref!4551 () (_ BitVec 64) ((_ zero_extend 32) ref!4548)) ; MOV operation - 0x7f345a756107: mov eax, esi
(define-fun ref!4553 () (_ BitVec 64) (concat (concat (concat (concat (concat (concat (concat ref!4522 ref!4523) ref!4524) ref!4525) ref!4526) ref!4527) ref!4528) ref!4529)) ; POP operation - 0x7f345a756109: pop rbx
(define-fun ref!4556 () (_ BitVec 32) (bvsub ref!4548 (_ bv35 32))) ; CMP operation - 0x4024d9: cmp eax, 0x23
(define-fun ref!4562 () (_ BitVec 1) (ite (= ref!4556 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x4024d9: cmp eax, 0x23
(define-fun ref!4565 () (_ BitVec 32) ((_ extract 31 0) (bvadd (_ bv18446744073709551568 64) ref!4551))) ; Extended part - LEA operation - 0x4024de: lea edx, [rax - 0x30]
(define-fun ref!4568 () (_ BitVec 32) (bvsub ref!4565 (_ bv9 32))) ; CMP operation - 0x4024e1: cmp edx, 9
(define-fun ref!4570 () (_ BitVec 1) ((_ extract 31 31) (bvxor (bvxor ref!4565 (bvxor (_ bv9 32) ref!4568)) (bvand (bvxor ref!4565 ref!4568) (bvxor ref!4565 (_ bv9 32)))))) ; Carry flag - 0x4024e1: cmp edx, 9
(define-fun ref!4574 () (_ BitVec 1) (ite (= ref!4568 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x4024e1: cmp edx, 9
(define-fun ref!4577 () (_ BitVec 32) ((_ extract 31 0) (bvadd ref!4553 (bvmul ref!4553 (_ bv4 64))))) ; Extended part - LEA operation - 0x4024c8: lea edx, [rbx + rbx*4]
(define-fun ref!4578 () (_ BitVec 64) ((_ zero_extend 32) ref!4577)) ; LEA operation - 0x4024c8: lea edx, [rbx + rbx*4]
(define-fun ref!4580 () (_ BitVec 32) ((_ extract 31 0) (bvadd (_ bv18446744073709551568 64) (bvadd ref!4578 ref!4578)))) ; Extended part - LEA operation - 0x4024cb: lea ebx, [rdx + rdx - 0x30]
(define-fun ref!4583 () (_ BitVec 32) (bvadd ref!4580 ref!4548)) ; Extended part - ADD operation - 0x4024cf: add ebx, eax
(define-fun ref!4584 () (_ BitVec 64) ((_ zero_extend 32) ref!4583)) ; ADD operation - 0x4024cf: add ebx, eax
(define-fun ref!4593 () (_ BitVec 8) ((_ extract 63 56) ref!4584)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4594 () (_ BitVec 8) ((_ extract 55 48) ref!4584)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4595 () (_ BitVec 8) ((_ extract 47 40) ref!4584)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4596 () (_ BitVec 8) ((_ extract 39 32) ref!4584)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4597 () (_ BitVec 8) ((_ extract 31 24) ref!4583)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4598 () (_ BitVec 8) ((_ extract 23 16) ref!4583)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4599 () (_ BitVec 8) ((_ extract 15 8) ref!4583)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4600 () (_ BitVec 8) ((_ extract 7 0) ref!4583)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4626 () (_ BitVec 64) (concat (concat (concat (concat (concat (concat (concat ref!4593 ref!4594) ref!4595) ref!4596) ref!4597) ref!4598) ref!4599) ref!4600)) ; POP operation - 0x7f345a756109: pop rbx
(define-fun ref!4650 () (_ BitVec 32) ((_ extract 31 0) ref!4626)) ; Extended part - MOV operation - 0x4024e6: mov eax, ebx
(define-fun ref!4684 () (_ BitVec 32) ((_ zero_extend 24) ref!6)) ; Extended part - MOVZX operation - 0x7f345a7560b5: movzx esi, byte ptr [rax]
(define-fun ref!4687 () (_ BitVec 64) ((_ zero_extend 32) ref!4684)) ; MOV operation - 0x7f345a756107: mov eax, esi
(define-fun ref!4689 () (_ BitVec 32) (bvsub ref!4684 (_ bv35 32))) ; CMP operation - 0x402448: cmp eax, 0x23
(define-fun ref!4695 () (_ BitVec 1) (ite (= ref!4689 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x402448: cmp eax, 0x23
(define-fun ref!4698 () (_ BitVec 32) (bvsub ref!4684 (_ bv4294967295 32))) ; CMP operation - 0x40244d: cmp eax, -1
(define-fun ref!4704 () (_ BitVec 1) (ite (= ref!4698 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x40244d: cmp eax, -1
(define-fun ref!4707 () (_ BitVec 32) (bvsub ref!4684 (_ bv9 32))) ; CMP operation - 0x402452: cmp eax, 9
(define-fun ref!4713 () (_ BitVec 1) (ite (= ref!4707 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x402452: cmp eax, 9
(define-fun ref!4716 () (_ BitVec 32) (bvsub ref!4684 (_ bv32 32))) ; CMP operation - 0x402457: cmp eax, 0x20
(define-fun ref!4722 () (_ BitVec 1) (ite (= ref!4716 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x402457: cmp eax, 0x20
(define-fun ref!4725 () (_ BitVec 32) (bvsub ref!4684 (_ bv13 32))) ; CMP operation - 0x40245c: cmp eax, 0xd
(define-fun ref!4731 () (_ BitVec 1) (ite (= ref!4725 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x40245c: cmp eax, 0xd
(define-fun ref!4734 () (_ BitVec 32) (bvsub ref!4684 (_ bv10 32))) ; CMP operation - 0x402461: cmp eax, 0xa
(define-fun ref!4740 () (_ BitVec 1) (ite (= ref!4734 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x402461: cmp eax, 0xa
(define-fun ref!4743 () (_ BitVec 32) ((_ extract 31 0) (bvadd (_ bv18446744073709551568 64) ref!4687))) ; Extended part - LEA operation - 0x402466: lea ebx, [rax - 0x30]
(define-fun ref!4744 () (_ BitVec 64) ((_ zero_extend 32) ref!4743)) ; LEA operation - 0x402466: lea ebx, [rax - 0x30]
(define-fun ref!4746 () (_ BitVec 32) (bvsub ref!4743 (_ bv9 32))) ; CMP operation - 0x402469: cmp ebx, 9
(define-fun ref!4748 () (_ BitVec 1) ((_ extract 31 31) (bvxor (bvxor ref!4743 (bvxor (_ bv9 32) ref!4746)) (bvand (bvxor ref!4743 ref!4746) (bvxor ref!4743 (_ bv9 32)))))) ; Carry flag - 0x402469: cmp ebx, 9
(define-fun ref!4752 () (_ BitVec 1) (ite (= ref!4746 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x402469: cmp ebx, 9
(define-fun ref!4756 () (_ BitVec 8) ((_ extract 63 56) ref!4744)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4757 () (_ BitVec 8) ((_ extract 55 48) ref!4744)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4758 () (_ BitVec 8) ((_ extract 47 40) ref!4744)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4759 () (_ BitVec 8) ((_ extract 39 32) ref!4744)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4760 () (_ BitVec 8) ((_ extract 31 24) (bvadd (_ bv18446744073709551568 64) ref!4687))) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4761 () (_ BitVec 8) ((_ extract 23 16) (bvadd (_ bv18446744073709551568 64) ref!4687))) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4762 () (_ BitVec 8) ((_ extract 15 8) (bvadd (_ bv18446744073709551568 64) ref!4687))) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4763 () (_ BitVec 8) ((_ extract 7 0) (bvadd (_ bv18446744073709551568 64) ref!4687))) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4782 () (_ BitVec 32) ((_ zero_extend 24) ref!7)) ; Extended part - MOVZX operation - 0x7f345a7560b5: movzx esi, byte ptr [rax]
(define-fun ref!4785 () (_ BitVec 64) ((_ zero_extend 32) ref!4782)) ; MOV operation - 0x7f345a756107: mov eax, esi
(define-fun ref!4787 () (_ BitVec 64) (concat (concat (concat (concat (concat (concat (concat ref!4756 ref!4757) ref!4758) ref!4759) ref!4760) ref!4761) ref!4762) ref!4763)) ; POP operation - 0x7f345a756109: pop rbx
(define-fun ref!4790 () (_ BitVec 32) (bvsub ref!4782 (_ bv35 32))) ; CMP operation - 0x4024d9: cmp eax, 0x23
(define-fun ref!4796 () (_ BitVec 1) (ite (= ref!4790 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x4024d9: cmp eax, 0x23
(define-fun ref!4799 () (_ BitVec 32) ((_ extract 31 0) (bvadd (_ bv18446744073709551568 64) ref!4785))) ; Extended part - LEA operation - 0x4024de: lea edx, [rax - 0x30]
(define-fun ref!4802 () (_ BitVec 32) (bvsub ref!4799 (_ bv9 32))) ; CMP operation - 0x4024e1: cmp edx, 9
(define-fun ref!4804 () (_ BitVec 1) ((_ extract 31 31) (bvxor (bvxor ref!4799 (bvxor (_ bv9 32) ref!4802)) (bvand (bvxor ref!4799 ref!4802) (bvxor ref!4799 (_ bv9 32)))))) ; Carry flag - 0x4024e1: cmp edx, 9
(define-fun ref!4808 () (_ BitVec 1) (ite (= ref!4802 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x4024e1: cmp edx, 9
(define-fun ref!4811 () (_ BitVec 32) ((_ extract 31 0) (bvadd ref!4787 (bvmul ref!4787 (_ bv4 64))))) ; Extended part - LEA operation - 0x4024c8: lea edx, [rbx + rbx*4]
(define-fun ref!4812 () (_ BitVec 64) ((_ zero_extend 32) ref!4811)) ; LEA operation - 0x4024c8: lea edx, [rbx + rbx*4]
(define-fun ref!4814 () (_ BitVec 32) ((_ extract 31 0) (bvadd (_ bv18446744073709551568 64) (bvadd ref!4812 ref!4812)))) ; Extended part - LEA operation - 0x4024cb: lea ebx, [rdx + rdx - 0x30]
(define-fun ref!4817 () (_ BitVec 32) (bvadd ref!4814 ref!4782)) ; Extended part - ADD operation - 0x4024cf: add ebx, eax
(define-fun ref!4818 () (_ BitVec 64) ((_ zero_extend 32) ref!4817)) ; ADD operation - 0x4024cf: add ebx, eax
(define-fun ref!4827 () (_ BitVec 8) ((_ extract 63 56) ref!4818)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4828 () (_ BitVec 8) ((_ extract 55 48) ref!4818)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4829 () (_ BitVec 8) ((_ extract 47 40) ref!4818)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4830 () (_ BitVec 8) ((_ extract 39 32) ref!4818)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4831 () (_ BitVec 8) ((_ extract 31 24) ref!4817)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4832 () (_ BitVec 8) ((_ extract 23 16) ref!4817)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4833 () (_ BitVec 8) ((_ extract 15 8) ref!4817)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4834 () (_ BitVec 8) ((_ extract 7 0) ref!4817)) ; Byte reference - PUSH operation - 0x7f345a756040: push rbx
(define-fun ref!4860 () (_ BitVec 64) (concat (concat (concat (concat (concat (concat (concat ref!4827 ref!4828) ref!4829) ref!4830) ref!4831) ref!4832) ref!4833) ref!4834)) ; POP operation - 0x7f345a756109: pop rbx
(define-fun ref!4884 () (_ BitVec 32) ((_ extract 31 0) ref!4860)) ; Extended part - MOV operation - 0x4024e6: mov eax, ebx
(define-fun ref!5197 () (_ BitVec 32) (bvand ref!4884 ref!4884)) ; TEST operation - 0x402597: test r15d, r15d
(define-fun ref!5202 () (_ BitVec 1) (ite (= ref!5197 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x402597: test r15d, r15d
(define-fun ref!5208 () (_ BitVec 32) (bvand ref!4650 ref!4650)) ; TEST operation - 0x40259f: test r13d, r13d
(define-fun ref!5213 () (_ BitVec 1) (ite (= ref!5208 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x40259f: test r13d, r13d
(define-fun ref!5222 () (_ BitVec 1) (ite (= (bvor (ite (= ref!5202 (_ bv1 1)) (_ bv1 8) (_ bv0 8)) (ite (= ref!5213 (_ bv1 1)) (_ bv1 8) (_ bv0 8))) (_ bv0 8)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x4025a5: or dl, al
(define-fun ref!5307 () (_ BitVec 64) ((_ zero_extend 32) ref!4650)) ; MOV operation - 0x402844: mov edx, r13d
(define-fun ref!5309 () (_ BitVec 64) (bvmul ref!5307 (_ bv3 64))) ; IMUL operation - 0x402858: imul rdx, rax
(define-fun ref!5356 () (_ BitVec 64) ref!5309) ; MOV operation - 0x7f345aadcb28: mov r12, rdx
(define-fun ref!5379 () (_ BitVec 64) (bvsub ref!5309 (_ bv999999976 64))) ; CMP operation - 0x7f345aadcb3b: cmp rdx, 0x3b9ac9e8
(define-fun ref!5381 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor ref!5309 (bvxor (_ bv999999976 64) ref!5379)) (bvand (bvxor ref!5309 ref!5379) (bvxor ref!5309 (_ bv999999976 64)))))) ; Carry flag - 0x7f345aadcb3b: cmp rdx, 0x3b9ac9e8
(define-fun ref!5385 () (_ BitVec 1) (ite (= ref!5379 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadcb3b: cmp rdx, 0x3b9ac9e8
(define-fun ref!5388 () (_ BitVec 64) ref!5356) ; MOV operation - 0x7f345aadcb4c: mov rax, r12
(define-fun ref!5390 () (_ BitVec 32) (bvand ((_ extract 31 0) ref!5388) (_ bv7 32))) ; Extended part - AND operation - 0x7f345aadcb4f: and eax, 7
(define-fun ref!5391 () (_ BitVec 64) ((_ zero_extend 32) ref!5390)) ; AND operation - 0x7f345aadcb4f: and eax, 7
(define-fun ref!5396 () (_ BitVec 1) (ite (= ref!5390 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadcb4f: and eax, 7
(define-fun ref!5399 () (_ BitVec 64) (bvadd (_ bv8 64) ref!5356)) ; LEA operation - 0x7f345aadcb54: lea rdx, [r12 + 8]
(define-fun ref!5401 () (_ BitVec 64) (bvsub ref!5399 ref!5391)) ; SUB operation - 0x7f345aadcb59: sub rdx, rax
(define-fun ref!5409 () (_ BitVec 64) ref!5401) ; MOV operation - 0x7f345aadcb5c: mov r12, rdx
(define-fun ref!5425 () (_ BitVec 64) (bvsub ref!5409 (_ bv16000 64))) ; CMP operation - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!5427 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor ref!5409 (bvxor (_ bv16000 64) ref!5425)) (bvand (bvxor ref!5409 ref!5425) (bvxor ref!5409 (_ bv16000 64)))))) ; Carry flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!5431 () (_ BitVec 1) (ite (= ref!5425 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!5434 () (_ BitVec 64) (bvadd (_ bv80 64) ref!5409)) ; ADD operation - 0x7f345aadcc28: add rsi, r12
(define-fun ref!5442 () (_ BitVec 64) (bvsub (_ bv16000 64) ref!5409)) ; SUB operation - 0x7f345aadcc2b: sub rcx, r12
(define-fun ref!5557 () (_ BitVec 64) ref!5442) ; MOV operation - 0x7f345aadcb95: mov rcx, qword ptr [r15 + 0x10]
(define-fun ref!5559 () (_ BitVec 64) (bvsub (_ bv4096 64) ref!5557)) ; CMP operation - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!5561 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor (_ bv4096 64) (bvxor ref!5557 ref!5559)) (bvand (bvxor (_ bv4096 64) ref!5559) (bvxor (_ bv4096 64) ref!5557))))) ; Carry flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!5565 () (_ BitVec 1) (ite (= ref!5559 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!5568 () (_ BitVec 64) ref!5434) ; MOV operation - 0x7f345aadcc20: mov rsi, qword ptr [rax + 8]
(define-fun ref!5572 () (_ BitVec 64) (bvadd ref!5568 (_ bv4096 64))) ; ADD operation - 0x7f345aadcc28: add rsi, r12
(define-fun ref!5580 () (_ BitVec 64) (bvsub ref!5557 (_ bv4096 64))) ; SUB operation - 0x7f345aadcc2b: sub rcx, r12
(define-fun ref!5656 () (_ BitVec 64) ref!5580) ; MOV operation - 0x7f345aadcb95: mov rcx, qword ptr [r15 + 0x10]
(define-fun ref!5658 () (_ BitVec 64) (bvsub (_ bv48 64) ref!5656)) ; CMP operation - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!5660 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor (_ bv48 64) (bvxor ref!5656 ref!5658)) (bvand (bvxor (_ bv48 64) ref!5658) (bvxor (_ bv48 64) ref!5656))))) ; Carry flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!5664 () (_ BitVec 1) (ite (= ref!5658 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!5667 () (_ BitVec 64) ref!5572) ; MOV operation - 0x7f345aadcc20: mov rsi, qword ptr [rax + 8]
(define-fun ref!5671 () (_ BitVec 64) (bvadd ref!5667 (_ bv48 64))) ; ADD operation - 0x7f345aadcc28: add rsi, r12
(define-fun ref!5679 () (_ BitVec 64) (bvsub ref!5656 (_ bv48 64))) ; SUB operation - 0x7f345aadcc2b: sub rcx, r12
(define-fun ref!5821 () (_ BitVec 32) (bvand ref!4817 ref!4817)) ; TEST operation - 0x7f345aabd6e1: test eax, eax
(define-fun ref!5826 () (_ BitVec 1) (ite (= ref!5821 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aabd6e1: test eax, eax
(define-fun ref!5831 () (_ BitVec 32) (bvand ref!4583 ref!4583)) ; TEST operation - 0x7f345aabd6e9: test r8d, r8d
(define-fun ref!5836 () (_ BitVec 1) (ite (= ref!5831 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aabd6e9: test r8d, r8d
(define-fun ref!5846 () (_ BitVec 32) (bvsub ref!4817 (_ bv65500 32))) ; CMP operation - 0x7f345aabd704: cmp eax, 0xffdc
(define-fun ref!5848 () (_ BitVec 1) ((_ extract 31 31) (bvxor (bvxor ref!4817 (bvxor (_ bv65500 32) ref!5846)) (bvand (bvxor ref!4817 ref!5846) (bvxor ref!4817 (_ bv65500 32)))))) ; Carry flag - 0x7f345aabd704: cmp eax, 0xffdc
(define-fun ref!5852 () (_ BitVec 1) (ite (= ref!5846 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aabd704: cmp eax, 0xffdc
(define-fun ref!5855 () (_ BitVec 32) (bvsub ref!4583 (_ bv65500 32))) ; CMP operation - 0x7f345aabd70f: cmp dword ptr [rbx + 0x50], 0xffdc
(define-fun ref!5857 () (_ BitVec 1) ((_ extract 31 31) (bvxor (bvxor ref!4583 (bvxor (_ bv65500 32) ref!5855)) (bvand (bvxor ref!4583 ref!5855) (bvxor ref!4583 (_ bv65500 32)))))) ; Carry flag - 0x7f345aabd70f: cmp dword ptr [rbx + 0x50], 0xffdc
(define-fun ref!5861 () (_ BitVec 1) (ite (= ref!5855 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aabd70f: cmp dword ptr [rbx + 0x50], 0xffdc
(define-fun ref!5864 () (_ BitVec 64) ((_ zero_extend 32) ref!4583)) ; MOV operation - 0x7f345aabd71c: mov edx, dword ptr [rbx + 0x30]
(define-fun ref!5869 () (_ BitVec 64) (bvmul (_ bv3 64) ref!5864)) ; IMUL operation - 0x7f345aabd723: imul rax, rdx
(define-fun ref!5873 () (_ BitVec 32) ((_ extract 31 0) ref!5869)) ; Extended part - MOV operation - 0x7f345aabd727: mov edx, eax
(define-fun ref!5874 () (_ BitVec 64) ((_ zero_extend 32) ref!5873)) ; MOV operation - 0x7f345aabd727: mov edx, eax
(define-fun ref!5876 () (_ BitVec 64) (bvsub ref!5869 ref!5874)) ; CMP operation - 0x7f345aabd729: cmp rax, rdx
(define-fun ref!5882 () (_ BitVec 1) (ite (= ref!5876 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aabd729: cmp rax, rdx
(define-fun ref!5902 () (_ BitVec 64) ((_ zero_extend 32) ref!4583)) ; MOV operation - 0x7f345aabd8b8: mov edi, dword ptr [rbx + 0x50]
(define-fun ref!5904 () (_ BitVec 64) (bvmul ref!5902 (_ bv2 64))) ; IMUL operation - 0x7f345aabd8c9: imul rdi, r11
(define-fun ref!5919 () (_ BitVec 64) (bvadd (_ bv18446744073709551615 64) (bvadd ref!5904 (_ bv16 64)))) ; LEA operation - 0x7f345aadc950: lea rax, [rdi + rsi - 1]
(define-fun ref!5921 () (_ BitVec 128) ((_ sign_extend 64) ref!5919)) ; Temporary variable - 0x7f345aadc955: cqo
(define-fun ref!5922 () (_ BitVec 64) ((_ extract 127 64) ref!5921)) ; CQO operation - 0x7f345aadc955: cqo
(define-fun ref!6035 () (_ BitVec 64) ((_ zero_extend 32) ref!4583)) ; MOV operation - 0x7f345aabd8b8: mov edi, dword ptr [rbx + 0x50]
(define-fun ref!6037 () (_ BitVec 64) ref!6035) ; IMUL operation - 0x7f345aabd8c9: imul rdi, r11
(define-fun ref!6041 () (_ BitVec 64) (bvadd (_ bv18446744073709551615 64) (bvadd ref!6037 (_ bv16 64)))) ; LEA operation - 0x7f345aadc950: lea rax, [rdi + rsi - 1]
(define-fun ref!6043 () (_ BitVec 128) ((_ sign_extend 64) ref!6041)) ; Temporary variable - 0x7f345aadc955: cqo
(define-fun ref!6044 () (_ BitVec 64) ((_ extract 127 64) ref!6043)) ; CQO operation - 0x7f345aadc955: cqo
(define-fun ref!6157 () (_ BitVec 64) ((_ zero_extend 32) ref!4583)) ; MOV operation - 0x7f345aabd8b8: mov edi, dword ptr [rbx + 0x50]
(define-fun ref!6159 () (_ BitVec 64) ref!6157) ; IMUL operation - 0x7f345aabd8c9: imul rdi, r11
(define-fun ref!6163 () (_ BitVec 64) (bvadd (_ bv18446744073709551615 64) (bvadd ref!6159 (_ bv16 64)))) ; LEA operation - 0x7f345aadc950: lea rax, [rdi + rsi - 1]
(define-fun ref!6165 () (_ BitVec 128) ((_ sign_extend 64) ref!6163)) ; Temporary variable - 0x7f345aadc955: cqo
(define-fun ref!6166 () (_ BitVec 64) ((_ extract 127 64) ref!6165)) ; CQO operation - 0x7f345aadc955: cqo
(define-fun ref!6318 () (_ BitVec 64) ref!5679) ; MOV operation - 0x7f345aadcb95: mov rcx, qword ptr [r15 + 0x10]
(define-fun ref!6320 () (_ BitVec 64) (bvsub (_ bv24 64) ref!6318)) ; CMP operation - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!6322 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor (_ bv24 64) (bvxor ref!6318 ref!6320)) (bvand (bvxor (_ bv24 64) ref!6320) (bvxor (_ bv24 64) ref!6318))))) ; Carry flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!6326 () (_ BitVec 1) (ite (= ref!6320 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!6329 () (_ BitVec 64) ref!5671) ; MOV operation - 0x7f345aadcc20: mov rsi, qword ptr [rax + 8]
(define-fun ref!6333 () (_ BitVec 64) (bvadd ref!6329 (_ bv24 64))) ; ADD operation - 0x7f345aadcc28: add rsi, r12
(define-fun ref!6341 () (_ BitVec 64) (bvsub ref!6318 (_ bv24 64))) ; SUB operation - 0x7f345aadcc2b: sub rcx, r12
(define-fun ref!6448 () (_ BitVec 64) ref!6341) ; MOV operation - 0x7f345aadcb95: mov rcx, qword ptr [r15 + 0x10]
(define-fun ref!6450 () (_ BitVec 64) (bvsub (_ bv168 64) ref!6448)) ; CMP operation - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!6452 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor (_ bv168 64) (bvxor ref!6448 ref!6450)) (bvand (bvxor (_ bv168 64) ref!6450) (bvxor (_ bv168 64) ref!6448))))) ; Carry flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!6456 () (_ BitVec 1) (ite (= ref!6450 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!6459 () (_ BitVec 64) ref!6333) ; MOV operation - 0x7f345aadcc20: mov rsi, qword ptr [rax + 8]
(define-fun ref!6461 () (_ BitVec 64) (bvadd (_ bv24 64) ref!6459)) ; LEA operation - 0x7f345aadcc24: lea rdi, [rsi + 0x18]
(define-fun ref!6463 () (_ BitVec 64) (bvadd ref!6459 (_ bv168 64))) ; ADD operation - 0x7f345aadcc28: add rsi, r12
(define-fun ref!6471 () (_ BitVec 64) (bvsub ref!6448 (_ bv168 64))) ; SUB operation - 0x7f345aadcc2b: sub rcx, r12
(define-fun ref!6507 () (_ BitVec 64) (bvadd (_ bv6335776 64) ref!6461)) ; ADD operation - 0x7f345aadcc3b: add rax, rdi
(define-fun ref!6515 () (_ BitVec 64) ref!6507) ; MOV operation - 0x7f345aabfae8: mov rsi, rax
(define-fun ref!6566 () (_ BitVec 64) ref!6515) ; MOV operation - 0x7f345aabfb3b: mov r13, rsi
(define-fun ref!6568 () (_ BitVec 32) (bvsub (_ bv1 32) ((_ extract 31 0) ref!6515))) ; Extended part - SUB operation - 0x7f345aabfb3e: sub r12d, esi
(define-fun ref!6569 () (_ BitVec 64) ((_ zero_extend 32) ref!6568)) ; SUB operation - 0x7f345aabfb3e: sub r12d, esi
(define-fun ref!6627 () (_ BitVec 32) ((_ extract 31 0) (bvadd ref!6569 ref!6566))) ; Extended part - LEA operation - 0x7f345aabfb6b: lea eax, [r12 + r13]
(define-fun ref!6646 () (_ BitVec 64) (bvadd ref!6566 (_ bv1 64))) ; ADD operation - 0x7f345aabfb7b: add r13, 1
(define-fun ref!6654 () (_ BitVec 32) (bvsub (concat (concat (concat (_ bv0 8) (_ bv0 8)) (_ bv0 8)) (_ bv3 8)) ref!6627)) ; CMP operation - 0x7f345aabfb7f: cmp dword ptr [rbx + 0x5c], eax
(define-fun ref!6657 () (_ BitVec 1) ((_ extract 31 31) (bvand (bvxor (concat (concat (concat (_ bv0 8) (_ bv0 8)) (_ bv0 8)) (_ bv3 8)) ref!6627) (bvxor (concat (concat (concat (_ bv0 8) (_ bv0 8)) (_ bv0 8)) (_ bv3 8)) ref!6654)))) ; Overflow flag - 0x7f345aabfb7f: cmp dword ptr [rbx + 0x5c], eax
(define-fun ref!6659 () (_ BitVec 1) ((_ extract 31 31) ref!6654)) ; Sign flag - 0x7f345aabfb7f: cmp dword ptr [rbx + 0x5c], eax
(define-fun ref!6660 () (_ BitVec 1) (ite (= ref!6654 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aabfb7f: cmp dword ptr [rbx + 0x5c], eax
(define-fun ref!6710 () (_ BitVec 32) ((_ extract 31 0) (bvadd ref!6569 ref!6646))) ; Extended part - LEA operation - 0x7f345aabfb6b: lea eax, [r12 + r13]
(define-fun ref!6729 () (_ BitVec 64) (bvadd ref!6646 (_ bv1 64))) ; ADD operation - 0x7f345aabfb7b: add r13, 1
(define-fun ref!6737 () (_ BitVec 32) (bvsub (concat (concat (concat (_ bv0 8) (_ bv0 8)) (_ bv0 8)) (_ bv3 8)) ref!6710)) ; CMP operation - 0x7f345aabfb7f: cmp dword ptr [rbx + 0x5c], eax
(define-fun ref!6740 () (_ BitVec 1) ((_ extract 31 31) (bvand (bvxor (concat (concat (concat (_ bv0 8) (_ bv0 8)) (_ bv0 8)) (_ bv3 8)) ref!6710) (bvxor (concat (concat (concat (_ bv0 8) (_ bv0 8)) (_ bv0 8)) (_ bv3 8)) ref!6737)))) ; Overflow flag - 0x7f345aabfb7f: cmp dword ptr [rbx + 0x5c], eax
(define-fun ref!6742 () (_ BitVec 1) ((_ extract 31 31) ref!6737)) ; Sign flag - 0x7f345aabfb7f: cmp dword ptr [rbx + 0x5c], eax
(define-fun ref!6743 () (_ BitVec 1) (ite (= ref!6737 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aabfb7f: cmp dword ptr [rbx + 0x5c], eax
(define-fun ref!6793 () (_ BitVec 32) ((_ extract 31 0) (bvadd ref!6569 ref!6729))) ; Extended part - LEA operation - 0x7f345aabfb6b: lea eax, [r12 + r13]
(define-fun ref!6820 () (_ BitVec 32) (bvsub (concat (concat (concat (_ bv0 8) (_ bv0 8)) (_ bv0 8)) (_ bv3 8)) ref!6793)) ; CMP operation - 0x7f345aabfb7f: cmp dword ptr [rbx + 0x5c], eax
(define-fun ref!6823 () (_ BitVec 1) ((_ extract 31 31) (bvand (bvxor (concat (concat (concat (_ bv0 8) (_ bv0 8)) (_ bv0 8)) (_ bv3 8)) ref!6793) (bvxor (concat (concat (concat (_ bv0 8) (_ bv0 8)) (_ bv0 8)) (_ bv3 8)) ref!6820)))) ; Overflow flag - 0x7f345aabfb7f: cmp dword ptr [rbx + 0x5c], eax
(define-fun ref!6825 () (_ BitVec 1) ((_ extract 31 31) ref!6820)) ; Sign flag - 0x7f345aabfb7f: cmp dword ptr [rbx + 0x5c], eax
(define-fun ref!6826 () (_ BitVec 1) (ite (= ref!6820 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aabfb7f: cmp dword ptr [rbx + 0x5c], eax
(define-fun ref!6858 () (_ BitVec 64) ref!6471) ; MOV operation - 0x7f345aadcb95: mov rcx, qword ptr [r15 + 0x10]
(define-fun ref!6860 () (_ BitVec 64) (bvsub (_ bv112 64) ref!6858)) ; CMP operation - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!6862 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor (_ bv112 64) (bvxor ref!6858 ref!6860)) (bvand (bvxor (_ bv112 64) ref!6860) (bvxor (_ bv112 64) ref!6858))))) ; Carry flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!6866 () (_ BitVec 1) (ite (= ref!6860 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!6869 () (_ BitVec 64) ref!6463) ; MOV operation - 0x7f345aadcc20: mov rsi, qword ptr [rax + 8]
(define-fun ref!6873 () (_ BitVec 64) (bvadd ref!6869 (_ bv112 64))) ; ADD operation - 0x7f345aadcc28: add rsi, r12
(define-fun ref!6881 () (_ BitVec 64) (bvsub ref!6858 (_ bv112 64))) ; SUB operation - 0x7f345aadcc2b: sub rcx, r12
(define-fun ref!6949 () (_ BitVec 64) ref!6507) ; MOV operation - 0x7f345aabee71: mov rax, qword ptr [rbx + 0x210]
(define-fun ref!6956 () (_ BitVec 32) (ite (bvult ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64))) (_ bv188 32)) (ite (bvult ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64))) (_ bv152 32)) (ite (bvult ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64))) (_ bv120 32)) (ite (bvult ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64))) (_ bv112 32)) (_ bv0 32) (bvadd (bvmul (_ bv3914673113 32) ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64)))) (_ bv1164484832 32))) (ite (bvult ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64))) (_ bv128 32)) (bvadd (bvmul (_ bv3914673357 32) ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64)))) (_ bv4206808040 32)) (ite (bvult ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64))) (_ bv136 32)) (bvadd (bvmul (_ bv3914673345 32) ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64)))) (_ bv2954193840 32)) (_ bv0 32)))) (ite (bvult ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64))) (_ bv164 32)) (ite (bvult ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64))) (_ bv156 32)) (_ bv1 32) (bvadd (bvmul (_ bv380296252 32) ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64)))) (_ bv803326832 32))) (ite (bvult ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64))) (_ bv172 32)) (bvadd (bvmul (_ bv380288159 32) ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64)))) (_ bv2057283928 32)) (ite (bvult ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64))) (_ bv180 32)) (bvadd (bvmul (_ bv4294959155 32) ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64)))) (_ bv1432816 32)) (bvadd (bvmul (_ bv380304420 32) ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64)))) (_ bv264681136 32)))))) (ite (bvult ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64))) (_ bv228 32)) (ite (bvult ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64))) (_ bv204 32)) (ite (bvult ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64))) (_ bv196 32)) (bvadd (bvmul (_ bv380296283 32) ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64)))) (_ bv1518775392 32)) (bvadd (bvmul (_ bv4294959155 32) ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64)))) (_ bv1628200 32))) (ite (bvult ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64))) (_ bv212 32)) (bvadd (bvmul (_ bv380305036 32) ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64)))) (_ bv4022151280 32)) (ite (bvult ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64))) (_ bv220 32)) (bvadd (bvmul (_ bv380296895 32) ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64)))) (_ bv981469448 32)) (bvadd (bvmul (_ bv380296895 32) ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64)))) (_ bv2234061584 32))))) (ite (bvult ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64))) (_ bv300 32)) (ite (bvult ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64))) (_ bv236 32)) (bvadd (bvmul (_ bv4294959155 32) ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64)))) (_ bv1888712 32)) (ite (bvult ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64))) (_ bv288 32)) (_ bv0 32) (_ bv2 32))) (ite (bvult ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64))) (_ bv352 32)) (_ bv0 32) (ite (bvult ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64))) (_ bv360 32)) (bvadd (bvmul (_ bv3914671469 32) ((_ extract 31 0) (bvsub (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64)))) (_ bv2241360800 32)) (_ bv0 32))))))) ; Extended part - MOV operation - 0x7f345aabee78: mov ecx, dword ptr [rax + 0x10]
(define-fun ref!6959 () (_ BitVec 32) (bvand ref!6956 ref!6956)) ; TEST operation - 0x7f345aabee7b: test ecx, ecx
(define-fun ref!6964 () (_ BitVec 1) (ite (= ref!6959 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aabee7b: test ecx, ecx
(define-fun ref!7005 () (_ BitVec 32) ((_ extract 31 0) (bvsdiv (concat ref!5922 ref!5919) ((_ sign_extend 64) (_ bv16 64))))) ; Extended part - MOV operation - 0x7f345aabeea0: mov edx, dword ptr [r12 + 0x1c]
(define-fun ref!7006 () (_ BitVec 64) ((_ zero_extend 32) ref!7005)) ; MOV operation - 0x7f345aabeea0: mov edx, dword ptr [r12 + 0x1c]
(define-fun ref!7024 () (_ BitVec 64) (bvmul ref!7006 (_ bv8 64))) ; IMUL operation - 0x7f345aabeeca: imul rdx, rax
(define-fun ref!7028 () (_ BitVec 64) (bvmul (_ bv2 64) ref!7024)) ; IMUL operation - 0x7f345aabeed5: imul rax, rdx
(define-fun ref!7032 () (_ BitVec 128) ((_ sign_extend 64) ref!7028)) ; Temporary variable - 0x7f345aabeed9: cqo
(define-fun ref!7033 () (_ BitVec 64) ((_ extract 127 64) ref!7032)) ; CQO operation - 0x7f345aabeed9: cqo
(define-fun ref!7038 () (_ BitVec 32) ((_ extract 31 0) (bvsdiv (concat ref!7033 ref!7028) ((_ sign_extend 64) (_ bv2 64))))) ; Extended part - MOV operation - 0x7f345aabeee3: mov edx, eax
(define-fun ref!7055 () (_ BitVec 64) ((_ zero_extend 32) ref!7038)) ; MOV operation - 0x7f345aadd341: mov ebp, edx
(define-fun ref!7065 () (_ BitVec 64) ((_ extract 63 0) (bvudiv (concat (_ bv0 64) (_ bv999999976 64)) ((_ zero_extend 64) ref!7055)))) ; DIV operation - 0x7f345aadd345: div rbp
(define-fun ref!7068 () (_ BitVec 64) (bvand ref!7065 ref!7065)) ; TEST operation - 0x7f345aadd358: test rax, rax
(define-fun ref!7073 () (_ BitVec 1) (ite (= ref!7068 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd358: test rax, rax
(define-fun ref!7079 () (_ BitVec 32) ((_ extract 31 0) (bvudiv (concat (_ bv0 64) (_ bv999999976 64)) ((_ zero_extend 64) ref!7055)))) ; Extended part - MOV operation - 0x7f345aadd364: mov r15d, eax
(define-fun ref!7082 () (_ BitVec 64) (bvsub ref!7065 (_ bv2 64))) ; CMP operation - 0x7f345aadd36b: cmp rax, rdx
(define-fun ref!7085 () (_ BitVec 1) ((_ extract 63 63) (bvand (bvxor ref!7065 (_ bv2 64)) (bvxor ref!7065 ref!7082)))) ; Overflow flag - 0x7f345aadd36b: cmp rax, rdx
(define-fun ref!7087 () (_ BitVec 1) ((_ extract 63 63) ref!7082)) ; Sign flag - 0x7f345aadd36b: cmp rax, rdx
(define-fun ref!7090 () (_ BitVec 32) (ite (= ref!7087 ref!7085) (_ bv2 32) ref!7079)) ; Extended part - CMOVGE operation - 0x7f345aadd371: cmovge r15d, r13d
(define-fun ref!7091 () (_ BitVec 64) ((_ zero_extend 32) ref!7090)) ; CMOVGE operation - 0x7f345aadd371: cmovge r15d, r13d
(define-fun ref!7115 () (_ BitVec 8) ((_ extract 63 56) ref!7091)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!7116 () (_ BitVec 8) ((_ extract 55 48) ref!7091)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!7117 () (_ BitVec 8) ((_ extract 47 40) ref!7091)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!7118 () (_ BitVec 8) ((_ extract 39 32) ref!7091)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!7119 () (_ BitVec 8) ((_ extract 31 24) ref!7090)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!7120 () (_ BitVec 8) ((_ extract 23 16) ref!7090)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!7121 () (_ BitVec 8) ((_ extract 15 8) ref!7090)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!7122 () (_ BitVec 8) ((_ extract 7 0) ref!7090)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!7126 () (_ BitVec 8) ((_ extract 63 56) ref!7055)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!7127 () (_ BitVec 8) ((_ extract 55 48) ref!7055)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!7128 () (_ BitVec 8) ((_ extract 47 40) ref!7055)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!7129 () (_ BitVec 8) ((_ extract 39 32) ref!7055)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!7130 () (_ BitVec 8) ((_ extract 31 24) (bvsdiv (concat ref!7033 ref!7028) ((_ sign_extend 64) (_ bv2 64))))) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!7131 () (_ BitVec 8) ((_ extract 23 16) (bvsdiv (concat ref!7033 ref!7028) ((_ sign_extend 64) (_ bv2 64))))) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!7132 () (_ BitVec 8) ((_ extract 15 8) (bvsdiv (concat ref!7033 ref!7028) ((_ sign_extend 64) (_ bv2 64))))) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!7133 () (_ BitVec 8) ((_ extract 7 0) (bvsdiv (concat ref!7033 ref!7028) ((_ sign_extend 64) (_ bv2 64))))) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!7142 () (_ BitVec 64) ref!6881) ; MOV operation - 0x7f345aadcb95: mov rcx, qword ptr [r15 + 0x10]
(define-fun ref!7144 () (_ BitVec 64) (bvsub (_ bv16 64) ref!7142)) ; CMP operation - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!7146 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor (_ bv16 64) (bvxor ref!7142 ref!7144)) (bvand (bvxor (_ bv16 64) ref!7144) (bvxor (_ bv16 64) ref!7142))))) ; Carry flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!7150 () (_ BitVec 1) (ite (= ref!7144 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!7153 () (_ BitVec 64) ref!6873) ; MOV operation - 0x7f345aadcc20: mov rsi, qword ptr [rax + 8]
(define-fun ref!7157 () (_ BitVec 64) (bvadd ref!7153 (_ bv16 64))) ; ADD operation - 0x7f345aadcc28: add rsi, r12
(define-fun ref!7165 () (_ BitVec 64) (bvsub ref!7142 (_ bv16 64))) ; SUB operation - 0x7f345aadcc2b: sub rcx, r12
(define-fun ref!7209 () (_ BitVec 64) (concat (concat (concat (concat (concat (concat (concat ref!7126 ref!7127) ref!7128) ref!7129) ref!7130) ref!7131) ref!7132) ref!7133)) ; POP operation - 0x7f345aadcc3e: pop rbp
(define-fun ref!7212 () (_ BitVec 64) (concat (concat (concat (concat (concat (concat (concat ref!7115 ref!7116) ref!7117) ref!7118) ref!7119) ref!7120) ref!7121) ref!7122)) ; POP operation - 0x7f345aadcc45: pop r15
(define-fun ref!7232 () (_ BitVec 32) (bvsub ((_ extract 31 0) ref!7212) (_ bv2 32))) ; CMP operation - 0x7f345aadd39c: cmp r15d, eax
(define-fun ref!7238 () (_ BitVec 1) (ite (= ref!7232 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd39c: cmp r15d, eax
(define-fun ref!7240 () (_ BitVec 32) (ite (= (bvnot ref!7238) (_ bv1 1)) (_ bv2 32) ((_ extract 31 0) ref!7212))) ; Extended part - CMOVA operation - 0x7f345aadd39f: cmova r15d, eax
(define-fun ref!7243 () (_ BitVec 64) ((_ zero_extend 32) ref!7240)) ; MOV operation - 0x7f345aadd3a3: mov edx, r15d
(define-fun ref!7245 () (_ BitVec 64) (bvmul ref!7243 ref!7209)) ; IMUL operation - 0x7f345aadd3a6: imul rdx, rbp
(define-fun ref!7273 () (_ BitVec 64) ref!7245) ; MOV operation - 0x7f345aadd16c: mov rbx, rdx
(define-fun ref!7283 () (_ BitVec 64) (bvsub ref!7245 (_ bv999999976 64))) ; CMP operation - 0x7f345aadd173: cmp rdx, 0x3b9ac9e8
(define-fun ref!7285 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor ref!7245 (bvxor (_ bv999999976 64) ref!7283)) (bvand (bvxor ref!7245 ref!7283) (bvxor ref!7245 (_ bv999999976 64)))))) ; Carry flag - 0x7f345aadd173: cmp rdx, 0x3b9ac9e8
(define-fun ref!7289 () (_ BitVec 1) (ite (= ref!7283 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd173: cmp rdx, 0x3b9ac9e8
(define-fun ref!7292 () (_ BitVec 64) ref!7273) ; MOV operation - 0x7f345aadd184: mov rax, rbx
(define-fun ref!7294 () (_ BitVec 32) (bvand ((_ extract 31 0) ref!7292) (_ bv7 32))) ; Extended part - AND operation - 0x7f345aadd187: and eax, 7
(define-fun ref!7300 () (_ BitVec 1) (ite (= ref!7294 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd187: and eax, 7
(define-fun ref!7345 () (_ BitVec 32) (bvand ref!7240 ref!7240)) ; TEST operation - 0x7f345aadd3af: test r15d, r15d
(define-fun ref!7350 () (_ BitVec 1) (ite (= ref!7345 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3af: test r15d, r15d
(define-fun ref!7382 () (_ BitVec 32) (bvsub (_ bv1 32) ref!7240)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!7388 () (_ BitVec 1) (ite (= ref!7382 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!7418 () (_ BitVec 32) (bvsub (_ bv2 32) ref!7240)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!7424 () (_ BitVec 1) (ite (= ref!7418 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!7456 () (_ BitVec 32) ((_ extract 31 0) (bvsdiv (concat ref!6044 ref!6041) ((_ sign_extend 64) (_ bv16 64))))) ; Extended part - MOV operation - 0x7f345aabeea0: mov edx, dword ptr [r12 + 0x1c]
(define-fun ref!7457 () (_ BitVec 64) ((_ zero_extend 32) ref!7456)) ; MOV operation - 0x7f345aabeea0: mov edx, dword ptr [r12 + 0x1c]
(define-fun ref!7473 () (_ BitVec 64) (bvmul ref!7457 (_ bv8 64))) ; IMUL operation - 0x7f345aabeeca: imul rdx, rax
(define-fun ref!7477 () (_ BitVec 64) (bvmul (_ bv2 64) ref!7473)) ; IMUL operation - 0x7f345aabeed5: imul rax, rdx
(define-fun ref!7484 () (_ BitVec 64) ref!7477) ; IDIV operation - 0x7f345aabeedb: idiv rsi
(define-fun ref!7487 () (_ BitVec 32) ((_ extract 31 0) ref!7484)) ; Extended part - MOV operation - 0x7f345aabeee3: mov edx, eax
(define-fun ref!7504 () (_ BitVec 64) ((_ zero_extend 32) ref!7487)) ; MOV operation - 0x7f345aadd341: mov ebp, edx
(define-fun ref!7514 () (_ BitVec 64) ((_ extract 63 0) (bvudiv (concat (_ bv0 64) (_ bv999999976 64)) ((_ zero_extend 64) ref!7504)))) ; DIV operation - 0x7f345aadd345: div rbp
(define-fun ref!7517 () (_ BitVec 64) (bvand ref!7514 ref!7514)) ; TEST operation - 0x7f345aadd358: test rax, rax
(define-fun ref!7522 () (_ BitVec 1) (ite (= ref!7517 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd358: test rax, rax
(define-fun ref!7528 () (_ BitVec 32) ((_ extract 31 0) (bvudiv (concat (_ bv0 64) (_ bv999999976 64)) ((_ zero_extend 64) ref!7504)))) ; Extended part - MOV operation - 0x7f345aadd364: mov r15d, eax
(define-fun ref!7531 () (_ BitVec 64) (bvsub ref!7514 (_ bv2 64))) ; CMP operation - 0x7f345aadd36b: cmp rax, rdx
(define-fun ref!7534 () (_ BitVec 1) ((_ extract 63 63) (bvand (bvxor ref!7514 (_ bv2 64)) (bvxor ref!7514 ref!7531)))) ; Overflow flag - 0x7f345aadd36b: cmp rax, rdx
(define-fun ref!7536 () (_ BitVec 1) ((_ extract 63 63) ref!7531)) ; Sign flag - 0x7f345aadd36b: cmp rax, rdx
(define-fun ref!7539 () (_ BitVec 32) (ite (= ref!7536 ref!7534) (_ bv2 32) ref!7528)) ; Extended part - CMOVGE operation - 0x7f345aadd371: cmovge r15d, r13d
(define-fun ref!7540 () (_ BitVec 64) ((_ zero_extend 32) ref!7539)) ; CMOVGE operation - 0x7f345aadd371: cmovge r15d, r13d
(define-fun ref!7564 () (_ BitVec 8) ((_ extract 63 56) ref!7540)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!7565 () (_ BitVec 8) ((_ extract 55 48) ref!7540)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!7566 () (_ BitVec 8) ((_ extract 47 40) ref!7540)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!7567 () (_ BitVec 8) ((_ extract 39 32) ref!7540)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!7568 () (_ BitVec 8) ((_ extract 31 24) ref!7539)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!7569 () (_ BitVec 8) ((_ extract 23 16) ref!7539)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!7570 () (_ BitVec 8) ((_ extract 15 8) ref!7539)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!7571 () (_ BitVec 8) ((_ extract 7 0) ref!7539)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!7586 () (_ BitVec 8) ((_ extract 63 56) ref!7504)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!7587 () (_ BitVec 8) ((_ extract 55 48) ref!7504)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!7588 () (_ BitVec 8) ((_ extract 47 40) ref!7504)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!7589 () (_ BitVec 8) ((_ extract 39 32) ref!7504)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!7590 () (_ BitVec 8) ((_ extract 31 24) ref!7484)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!7591 () (_ BitVec 8) ((_ extract 23 16) ref!7484)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!7592 () (_ BitVec 8) ((_ extract 15 8) ref!7484)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!7593 () (_ BitVec 8) ((_ extract 7 0) ref!7484)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!7602 () (_ BitVec 64) ref!7165) ; MOV operation - 0x7f345aadcb95: mov rcx, qword ptr [r15 + 0x10]
(define-fun ref!7604 () (_ BitVec 64) (bvsub (_ bv16 64) ref!7602)) ; CMP operation - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!7606 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor (_ bv16 64) (bvxor ref!7602 ref!7604)) (bvand (bvxor (_ bv16 64) ref!7604) (bvxor (_ bv16 64) ref!7602))))) ; Carry flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!7610 () (_ BitVec 1) (ite (= ref!7604 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!7613 () (_ BitVec 64) ref!7157) ; MOV operation - 0x7f345aadcc20: mov rsi, qword ptr [rax + 8]
(define-fun ref!7617 () (_ BitVec 64) (bvadd ref!7613 (_ bv16 64))) ; ADD operation - 0x7f345aadcc28: add rsi, r12
(define-fun ref!7625 () (_ BitVec 64) (bvsub ref!7602 (_ bv16 64))) ; SUB operation - 0x7f345aadcc2b: sub rcx, r12
(define-fun ref!7669 () (_ BitVec 64) (concat (concat (concat (concat (concat (concat (concat ref!7586 ref!7587) ref!7588) ref!7589) ref!7590) ref!7591) ref!7592) ref!7593)) ; POP operation - 0x7f345aadcc3e: pop rbp
(define-fun ref!7672 () (_ BitVec 64) (concat (concat (concat (concat (concat (concat (concat ref!7564 ref!7565) ref!7566) ref!7567) ref!7568) ref!7569) ref!7570) ref!7571)) ; POP operation - 0x7f345aadcc45: pop r15
(define-fun ref!7692 () (_ BitVec 32) (bvsub ((_ extract 31 0) ref!7672) (_ bv2 32))) ; CMP operation - 0x7f345aadd39c: cmp r15d, eax
(define-fun ref!7698 () (_ BitVec 1) (ite (= ref!7692 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd39c: cmp r15d, eax
(define-fun ref!7700 () (_ BitVec 32) (ite (= (bvnot ref!7698) (_ bv1 1)) (_ bv2 32) ((_ extract 31 0) ref!7672))) ; Extended part - CMOVA operation - 0x7f345aadd39f: cmova r15d, eax
(define-fun ref!7703 () (_ BitVec 64) ((_ zero_extend 32) ref!7700)) ; MOV operation - 0x7f345aadd3a3: mov edx, r15d
(define-fun ref!7705 () (_ BitVec 64) (bvmul ref!7703 ref!7669)) ; IMUL operation - 0x7f345aadd3a6: imul rdx, rbp
(define-fun ref!7733 () (_ BitVec 64) ref!7705) ; MOV operation - 0x7f345aadd16c: mov rbx, rdx
(define-fun ref!7743 () (_ BitVec 64) (bvsub ref!7705 (_ bv999999976 64))) ; CMP operation - 0x7f345aadd173: cmp rdx, 0x3b9ac9e8
(define-fun ref!7745 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor ref!7705 (bvxor (_ bv999999976 64) ref!7743)) (bvand (bvxor ref!7705 ref!7743) (bvxor ref!7705 (_ bv999999976 64)))))) ; Carry flag - 0x7f345aadd173: cmp rdx, 0x3b9ac9e8
(define-fun ref!7749 () (_ BitVec 1) (ite (= ref!7743 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd173: cmp rdx, 0x3b9ac9e8
(define-fun ref!7752 () (_ BitVec 64) ref!7733) ; MOV operation - 0x7f345aadd184: mov rax, rbx
(define-fun ref!7754 () (_ BitVec 32) (bvand ((_ extract 31 0) ref!7752) (_ bv7 32))) ; Extended part - AND operation - 0x7f345aadd187: and eax, 7
(define-fun ref!7760 () (_ BitVec 1) (ite (= ref!7754 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd187: and eax, 7
(define-fun ref!7807 () (_ BitVec 32) (bvand ref!7700 ref!7700)) ; TEST operation - 0x7f345aadd3af: test r15d, r15d
(define-fun ref!7812 () (_ BitVec 1) (ite (= ref!7807 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3af: test r15d, r15d
(define-fun ref!7844 () (_ BitVec 32) (bvsub (_ bv1 32) ref!7700)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!7850 () (_ BitVec 1) (ite (= ref!7844 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!7880 () (_ BitVec 32) (bvsub (_ bv2 32) ref!7700)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!7886 () (_ BitVec 1) (ite (= ref!7880 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!7918 () (_ BitVec 32) ((_ extract 31 0) (bvsdiv (concat ref!6166 ref!6163) ((_ sign_extend 64) (_ bv16 64))))) ; Extended part - MOV operation - 0x7f345aabeea0: mov edx, dword ptr [r12 + 0x1c]
(define-fun ref!7919 () (_ BitVec 64) ((_ zero_extend 32) ref!7918)) ; MOV operation - 0x7f345aabeea0: mov edx, dword ptr [r12 + 0x1c]
(define-fun ref!7935 () (_ BitVec 64) (bvmul ref!7919 (_ bv8 64))) ; IMUL operation - 0x7f345aabeeca: imul rdx, rax
(define-fun ref!7939 () (_ BitVec 64) (bvmul (_ bv2 64) ref!7935)) ; IMUL operation - 0x7f345aabeed5: imul rax, rdx
(define-fun ref!7946 () (_ BitVec 64) ref!7939) ; IDIV operation - 0x7f345aabeedb: idiv rsi
(define-fun ref!7949 () (_ BitVec 32) ((_ extract 31 0) ref!7946)) ; Extended part - MOV operation - 0x7f345aabeee3: mov edx, eax
(define-fun ref!7966 () (_ BitVec 64) ((_ zero_extend 32) ref!7949)) ; MOV operation - 0x7f345aadd341: mov ebp, edx
(define-fun ref!7976 () (_ BitVec 64) ((_ extract 63 0) (bvudiv (concat (_ bv0 64) (_ bv999999976 64)) ((_ zero_extend 64) ref!7966)))) ; DIV operation - 0x7f345aadd345: div rbp
(define-fun ref!7979 () (_ BitVec 64) (bvand ref!7976 ref!7976)) ; TEST operation - 0x7f345aadd358: test rax, rax
(define-fun ref!7984 () (_ BitVec 1) (ite (= ref!7979 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd358: test rax, rax
(define-fun ref!7990 () (_ BitVec 32) ((_ extract 31 0) (bvudiv (concat (_ bv0 64) (_ bv999999976 64)) ((_ zero_extend 64) ref!7966)))) ; Extended part - MOV operation - 0x7f345aadd364: mov r15d, eax
(define-fun ref!7993 () (_ BitVec 64) (bvsub ref!7976 (_ bv2 64))) ; CMP operation - 0x7f345aadd36b: cmp rax, rdx
(define-fun ref!7996 () (_ BitVec 1) ((_ extract 63 63) (bvand (bvxor ref!7976 (_ bv2 64)) (bvxor ref!7976 ref!7993)))) ; Overflow flag - 0x7f345aadd36b: cmp rax, rdx
(define-fun ref!7998 () (_ BitVec 1) ((_ extract 63 63) ref!7993)) ; Sign flag - 0x7f345aadd36b: cmp rax, rdx
(define-fun ref!8001 () (_ BitVec 32) (ite (= ref!7998 ref!7996) (_ bv2 32) ref!7990)) ; Extended part - CMOVGE operation - 0x7f345aadd371: cmovge r15d, r13d
(define-fun ref!8002 () (_ BitVec 64) ((_ zero_extend 32) ref!8001)) ; CMOVGE operation - 0x7f345aadd371: cmovge r15d, r13d
(define-fun ref!8026 () (_ BitVec 8) ((_ extract 63 56) ref!8002)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!8027 () (_ BitVec 8) ((_ extract 55 48) ref!8002)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!8028 () (_ BitVec 8) ((_ extract 47 40) ref!8002)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!8029 () (_ BitVec 8) ((_ extract 39 32) ref!8002)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!8030 () (_ BitVec 8) ((_ extract 31 24) ref!8001)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!8031 () (_ BitVec 8) ((_ extract 23 16) ref!8001)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!8032 () (_ BitVec 8) ((_ extract 15 8) ref!8001)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!8033 () (_ BitVec 8) ((_ extract 7 0) ref!8001)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!8048 () (_ BitVec 8) ((_ extract 63 56) ref!7966)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!8049 () (_ BitVec 8) ((_ extract 55 48) ref!7966)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!8050 () (_ BitVec 8) ((_ extract 47 40) ref!7966)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!8051 () (_ BitVec 8) ((_ extract 39 32) ref!7966)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!8052 () (_ BitVec 8) ((_ extract 31 24) ref!7946)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!8053 () (_ BitVec 8) ((_ extract 23 16) ref!7946)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!8054 () (_ BitVec 8) ((_ extract 15 8) ref!7946)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!8055 () (_ BitVec 8) ((_ extract 7 0) ref!7946)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!8064 () (_ BitVec 64) ref!7625) ; MOV operation - 0x7f345aadcb95: mov rcx, qword ptr [r15 + 0x10]
(define-fun ref!8066 () (_ BitVec 64) (bvsub (_ bv16 64) ref!8064)) ; CMP operation - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!8068 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor (_ bv16 64) (bvxor ref!8064 ref!8066)) (bvand (bvxor (_ bv16 64) ref!8066) (bvxor (_ bv16 64) ref!8064))))) ; Carry flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!8072 () (_ BitVec 1) (ite (= ref!8066 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!8075 () (_ BitVec 64) ref!7617) ; MOV operation - 0x7f345aadcc20: mov rsi, qword ptr [rax + 8]
(define-fun ref!8079 () (_ BitVec 64) (bvadd ref!8075 (_ bv16 64))) ; ADD operation - 0x7f345aadcc28: add rsi, r12
(define-fun ref!8087 () (_ BitVec 64) (bvsub ref!8064 (_ bv16 64))) ; SUB operation - 0x7f345aadcc2b: sub rcx, r12
(define-fun ref!8131 () (_ BitVec 64) (concat (concat (concat (concat (concat (concat (concat ref!8048 ref!8049) ref!8050) ref!8051) ref!8052) ref!8053) ref!8054) ref!8055)) ; POP operation - 0x7f345aadcc3e: pop rbp
(define-fun ref!8134 () (_ BitVec 64) (concat (concat (concat (concat (concat (concat (concat ref!8026 ref!8027) ref!8028) ref!8029) ref!8030) ref!8031) ref!8032) ref!8033)) ; POP operation - 0x7f345aadcc45: pop r15
(define-fun ref!8154 () (_ BitVec 32) (bvsub ((_ extract 31 0) ref!8134) (_ bv2 32))) ; CMP operation - 0x7f345aadd39c: cmp r15d, eax
(define-fun ref!8160 () (_ BitVec 1) (ite (= ref!8154 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd39c: cmp r15d, eax
(define-fun ref!8162 () (_ BitVec 32) (ite (= (bvnot ref!8160) (_ bv1 1)) (_ bv2 32) ((_ extract 31 0) ref!8134))) ; Extended part - CMOVA operation - 0x7f345aadd39f: cmova r15d, eax
(define-fun ref!8165 () (_ BitVec 64) ((_ zero_extend 32) ref!8162)) ; MOV operation - 0x7f345aadd3a3: mov edx, r15d
(define-fun ref!8167 () (_ BitVec 64) (bvmul ref!8165 ref!8131)) ; IMUL operation - 0x7f345aadd3a6: imul rdx, rbp
(define-fun ref!8195 () (_ BitVec 64) ref!8167) ; MOV operation - 0x7f345aadd16c: mov rbx, rdx
(define-fun ref!8205 () (_ BitVec 64) (bvsub ref!8167 (_ bv999999976 64))) ; CMP operation - 0x7f345aadd173: cmp rdx, 0x3b9ac9e8
(define-fun ref!8207 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor ref!8167 (bvxor (_ bv999999976 64) ref!8205)) (bvand (bvxor ref!8167 ref!8205) (bvxor ref!8167 (_ bv999999976 64)))))) ; Carry flag - 0x7f345aadd173: cmp rdx, 0x3b9ac9e8
(define-fun ref!8211 () (_ BitVec 1) (ite (= ref!8205 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd173: cmp rdx, 0x3b9ac9e8
(define-fun ref!8214 () (_ BitVec 64) ref!8195) ; MOV operation - 0x7f345aadd184: mov rax, rbx
(define-fun ref!8216 () (_ BitVec 32) (bvand ((_ extract 31 0) ref!8214) (_ bv7 32))) ; Extended part - AND operation - 0x7f345aadd187: and eax, 7
(define-fun ref!8222 () (_ BitVec 1) (ite (= ref!8216 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd187: and eax, 7
(define-fun ref!8269 () (_ BitVec 32) (bvand ref!8162 ref!8162)) ; TEST operation - 0x7f345aadd3af: test r15d, r15d
(define-fun ref!8274 () (_ BitVec 1) (ite (= ref!8269 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3af: test r15d, r15d
(define-fun ref!8306 () (_ BitVec 32) (bvsub (_ bv1 32) ref!8162)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!8312 () (_ BitVec 1) (ite (= ref!8306 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!8342 () (_ BitVec 32) (bvsub (_ bv2 32) ref!8162)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!8348 () (_ BitVec 1) (ite (= ref!8342 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!8388 () (_ BitVec 64) ref!8087) ; MOV operation - 0x7f345aadcb95: mov rcx, qword ptr [r15 + 0x10]
(define-fun ref!8390 () (_ BitVec 64) (bvsub (_ bv312 64) ref!8388)) ; CMP operation - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!8392 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor (_ bv312 64) (bvxor ref!8388 ref!8390)) (bvand (bvxor (_ bv312 64) ref!8390) (bvxor (_ bv312 64) ref!8388))))) ; Carry flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!8396 () (_ BitVec 1) (ite (= ref!8390 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!8399 () (_ BitVec 64) ref!8079) ; MOV operation - 0x7f345aadcc20: mov rsi, qword ptr [rax + 8]
(define-fun ref!8403 () (_ BitVec 64) (bvadd ref!8399 (_ bv312 64))) ; ADD operation - 0x7f345aadcc28: add rsi, r12
(define-fun ref!8411 () (_ BitVec 64) (bvsub ref!8388 (_ bv312 64))) ; SUB operation - 0x7f345aadcc2b: sub rcx, r12
(define-fun ref!8571 () (_ BitVec 64) ref!8411) ; MOV operation - 0x7f345aadcb95: mov rcx, qword ptr [r15 + 0x10]
(define-fun ref!8573 () (_ BitVec 64) (bvsub (_ bv312 64) ref!8571)) ; CMP operation - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!8575 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor (_ bv312 64) (bvxor ref!8571 ref!8573)) (bvand (bvxor (_ bv312 64) ref!8573) (bvxor (_ bv312 64) ref!8571))))) ; Carry flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!8579 () (_ BitVec 1) (ite (= ref!8573 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!8582 () (_ BitVec 64) ref!8403) ; MOV operation - 0x7f345aadcc20: mov rsi, qword ptr [rax + 8]
(define-fun ref!8584 () (_ BitVec 64) (bvadd (_ bv24 64) ref!8582)) ; LEA operation - 0x7f345aadcc24: lea rdi, [rsi + 0x18]
(define-fun ref!8594 () (_ BitVec 64) (bvsub ref!8571 (_ bv312 64))) ; SUB operation - 0x7f345aadcc2b: sub rcx, r12
(define-fun ref!8630 () (_ BitVec 64) (bvadd (_ bv6335776 64) ref!8584)) ; ADD operation - 0x7f345aadcc3b: add rax, rdi
(define-fun ref!8667 () (_ BitVec 64) (bvadd (_ bv96 64) ref!8630)) ; LEA operation - 0x7f345aabb7d8: lea rdx, [rax + 0x60]
(define-fun ref!8669 () (_ BitVec 64) (bvsub ref!8630 (_ bv18446744073709551488 64))) ; SUB operation - 0x7f345aabb7dc: sub rax, -0x80
(define-fun ref!8697 () (_ BitVec 64) (bvadd ref!8667 (_ bv8 64))) ; ADD operation - 0x7f345aabb7ef: add rdx, 8
(define-fun ref!8725 () (_ BitVec 64) (bvsub ref!8697 ref!8669)) ; CMP operation - 0x7f345aabb803: cmp rdx, rax
(define-fun ref!8731 () (_ BitVec 1) (ite (= ref!8725 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aabb803: cmp rdx, rax
(define-fun ref!8754 () (_ BitVec 64) (bvadd ref!8697 (_ bv8 64))) ; ADD operation - 0x7f345aabb7ef: add rdx, 8
(define-fun ref!8782 () (_ BitVec 64) (bvsub ref!8754 ref!8669)) ; CMP operation - 0x7f345aabb803: cmp rdx, rax
(define-fun ref!8788 () (_ BitVec 1) (ite (= ref!8782 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aabb803: cmp rdx, rax
(define-fun ref!8811 () (_ BitVec 64) (bvadd ref!8754 (_ bv8 64))) ; ADD operation - 0x7f345aabb7ef: add rdx, 8
(define-fun ref!8839 () (_ BitVec 64) (bvsub ref!8811 ref!8669)) ; CMP operation - 0x7f345aabb803: cmp rdx, rax
(define-fun ref!8845 () (_ BitVec 1) (ite (= ref!8839 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aabb803: cmp rdx, rax
(define-fun ref!8868 () (_ BitVec 64) (bvadd ref!8811 (_ bv8 64))) ; ADD operation - 0x7f345aabb7ef: add rdx, 8
(define-fun ref!8896 () (_ BitVec 64) (bvsub ref!8868 ref!8669)) ; CMP operation - 0x7f345aabb803: cmp rdx, rax
(define-fun ref!8902 () (_ BitVec 1) (ite (= ref!8896 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aabb803: cmp rdx, rax
(define-fun ref!8924 () (_ BitVec 64) ref!8594) ; MOV operation - 0x7f345aadcb95: mov rcx, qword ptr [r15 + 0x10]
(define-fun ref!8926 () (_ BitVec 64) (bvsub (_ bv192 64) ref!8924)) ; CMP operation - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!8928 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor (_ bv192 64) (bvxor ref!8924 ref!8926)) (bvand (bvxor (_ bv192 64) ref!8926) (bvxor (_ bv192 64) ref!8924))))) ; Carry flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!8932 () (_ BitVec 1) (ite (= ref!8926 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!8947 () (_ BitVec 64) (bvsub ref!8924 (_ bv192 64))) ; SUB operation - 0x7f345aadcc2b: sub rcx, r12
(define-fun ref!9321 () (_ BitVec 64) ref!8947) ; MOV operation - 0x7f345aadcb95: mov rcx, qword ptr [r15 + 0x10]
(define-fun ref!9323 () (_ BitVec 64) (bvsub (_ bv112 64) ref!9321)) ; CMP operation - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!9325 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor (_ bv112 64) (bvxor ref!9321 ref!9323)) (bvand (bvxor (_ bv112 64) ref!9323) (bvxor (_ bv112 64) ref!9321))))) ; Carry flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!9329 () (_ BitVec 1) (ite (= ref!9323 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!9344 () (_ BitVec 64) (bvsub ref!9321 (_ bv112 64))) ; SUB operation - 0x7f345aadcc2b: sub rcx, r12
(define-fun ref!9425 () (_ BitVec 32) (bvmul (_ bv8 32) ((_ extract 31 0) (bvsdiv (concat ref!5922 ref!5919) ((_ sign_extend 64) (_ bv16 64)))))) ; Extended part - IMUL operation - 0x7f345aabba9b: imul edx, dword ptr [rbx + 0x1c]
(define-fun ref!9451 () (_ BitVec 64) ((_ zero_extend 32) ref!9425)) ; MOV operation - 0x7f345aadd341: mov ebp, edx
(define-fun ref!9461 () (_ BitVec 64) ((_ extract 63 0) (bvudiv (concat (_ bv0 64) (_ bv999999976 64)) ((_ zero_extend 64) ref!9451)))) ; DIV operation - 0x7f345aadd345: div rbp
(define-fun ref!9464 () (_ BitVec 64) (bvand ref!9461 ref!9461)) ; TEST operation - 0x7f345aadd358: test rax, rax
(define-fun ref!9469 () (_ BitVec 1) (ite (= ref!9464 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd358: test rax, rax
(define-fun ref!9475 () (_ BitVec 32) ((_ extract 31 0) (bvudiv (concat (_ bv0 64) (_ bv999999976 64)) ((_ zero_extend 64) ref!9451)))) ; Extended part - MOV operation - 0x7f345aadd364: mov r15d, eax
(define-fun ref!9478 () (_ BitVec 64) (bvsub ref!9461 (_ bv16 64))) ; CMP operation - 0x7f345aadd36b: cmp rax, rdx
(define-fun ref!9481 () (_ BitVec 1) ((_ extract 63 63) (bvand (bvxor ref!9461 (_ bv16 64)) (bvxor ref!9461 ref!9478)))) ; Overflow flag - 0x7f345aadd36b: cmp rax, rdx
(define-fun ref!9483 () (_ BitVec 1) ((_ extract 63 63) ref!9478)) ; Sign flag - 0x7f345aadd36b: cmp rax, rdx
(define-fun ref!9486 () (_ BitVec 32) (ite (= ref!9483 ref!9481) (_ bv16 32) ref!9475)) ; Extended part - CMOVGE operation - 0x7f345aadd371: cmovge r15d, r13d
(define-fun ref!9487 () (_ BitVec 64) ((_ zero_extend 32) ref!9486)) ; CMOVGE operation - 0x7f345aadd371: cmovge r15d, r13d
(define-fun ref!9511 () (_ BitVec 8) ((_ extract 63 56) ref!9487)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!9512 () (_ BitVec 8) ((_ extract 55 48) ref!9487)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!9513 () (_ BitVec 8) ((_ extract 47 40) ref!9487)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!9514 () (_ BitVec 8) ((_ extract 39 32) ref!9487)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!9515 () (_ BitVec 8) ((_ extract 31 24) ref!9486)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!9516 () (_ BitVec 8) ((_ extract 23 16) ref!9486)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!9517 () (_ BitVec 8) ((_ extract 15 8) ref!9486)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!9518 () (_ BitVec 8) ((_ extract 7 0) ref!9486)) ; Byte reference - PUSH operation - 0x7f345aadcb20: push r15
(define-fun ref!9522 () (_ BitVec 8) ((_ extract 63 56) ref!9451)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!9523 () (_ BitVec 8) ((_ extract 55 48) ref!9451)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!9524 () (_ BitVec 8) ((_ extract 47 40) ref!9451)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!9525 () (_ BitVec 8) ((_ extract 39 32) ref!9451)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!9526 () (_ BitVec 8) ((_ extract 31 24) ref!9425)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!9527 () (_ BitVec 8) ((_ extract 23 16) ref!9425)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!9528 () (_ BitVec 8) ((_ extract 15 8) ref!9425)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!9529 () (_ BitVec 8) ((_ extract 7 0) ref!9425)) ; Byte reference - PUSH operation - 0x7f345aadcb2b: push rbp
(define-fun ref!9538 () (_ BitVec 64) ref!9344) ; MOV operation - 0x7f345aadcb95: mov rcx, qword ptr [r15 + 0x10]
(define-fun ref!9540 () (_ BitVec 64) (bvsub (_ bv128 64) ref!9538)) ; CMP operation - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!9542 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor (_ bv128 64) (bvxor ref!9538 ref!9540)) (bvand (bvxor (_ bv128 64) ref!9540) (bvxor (_ bv128 64) ref!9538))))) ; Carry flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!9546 () (_ BitVec 1) (ite (= ref!9540 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadcb99: cmp r12, rcx
(define-fun ref!9605 () (_ BitVec 64) (concat (concat (concat (concat (concat (concat (concat ref!9522 ref!9523) ref!9524) ref!9525) ref!9526) ref!9527) ref!9528) ref!9529)) ; POP operation - 0x7f345aadcc3e: pop rbp
(define-fun ref!9608 () (_ BitVec 64) (concat (concat (concat (concat (concat (concat (concat ref!9511 ref!9512) ref!9513) ref!9514) ref!9515) ref!9516) ref!9517) ref!9518)) ; POP operation - 0x7f345aadcc45: pop r15
(define-fun ref!9628 () (_ BitVec 32) (bvsub ((_ extract 31 0) ref!9608) (_ bv16 32))) ; CMP operation - 0x7f345aadd39c: cmp r15d, eax
(define-fun ref!9634 () (_ BitVec 1) (ite (= ref!9628 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd39c: cmp r15d, eax
(define-fun ref!9636 () (_ BitVec 32) (ite (= (bvnot ref!9634) (_ bv1 1)) (_ bv16 32) ((_ extract 31 0) ref!9608))) ; Extended part - CMOVA operation - 0x7f345aadd39f: cmova r15d, eax
(define-fun ref!9639 () (_ BitVec 64) ((_ zero_extend 32) ref!9636)) ; MOV operation - 0x7f345aadd3a3: mov edx, r15d
(define-fun ref!9641 () (_ BitVec 64) (bvmul ref!9639 ref!9605)) ; IMUL operation - 0x7f345aadd3a6: imul rdx, rbp
(define-fun ref!9669 () (_ BitVec 64) ref!9641) ; MOV operation - 0x7f345aadd16c: mov rbx, rdx
(define-fun ref!9679 () (_ BitVec 64) (bvsub ref!9641 (_ bv999999976 64))) ; CMP operation - 0x7f345aadd173: cmp rdx, 0x3b9ac9e8
(define-fun ref!9681 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor ref!9641 (bvxor (_ bv999999976 64) ref!9679)) (bvand (bvxor ref!9641 ref!9679) (bvxor ref!9641 (_ bv999999976 64)))))) ; Carry flag - 0x7f345aadd173: cmp rdx, 0x3b9ac9e8
(define-fun ref!9685 () (_ BitVec 1) (ite (= ref!9679 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd173: cmp rdx, 0x3b9ac9e8
(define-fun ref!9688 () (_ BitVec 64) ref!9669) ; MOV operation - 0x7f345aadd184: mov rax, rbx
(define-fun ref!9690 () (_ BitVec 32) (bvand ((_ extract 31 0) ref!9688) (_ bv7 32))) ; Extended part - AND operation - 0x7f345aadd187: and eax, 7
(define-fun ref!9696 () (_ BitVec 1) (ite (= ref!9690 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd187: and eax, 7
(define-fun ref!9743 () (_ BitVec 32) (bvand ref!9636 ref!9636)) ; TEST operation - 0x7f345aadd3af: test r15d, r15d
(define-fun ref!9748 () (_ BitVec 1) (ite (= ref!9743 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3af: test r15d, r15d
(define-fun ref!9780 () (_ BitVec 32) (bvsub (_ bv1 32) ref!9636)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!9786 () (_ BitVec 1) (ite (= ref!9780 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!9816 () (_ BitVec 32) (bvsub (_ bv2 32) ref!9636)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!9822 () (_ BitVec 1) (ite (= ref!9816 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!9852 () (_ BitVec 32) (bvsub (_ bv3 32) ref!9636)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!9858 () (_ BitVec 1) (ite (= ref!9852 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!9888 () (_ BitVec 32) (bvsub (_ bv4 32) ref!9636)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!9894 () (_ BitVec 1) (ite (= ref!9888 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!9924 () (_ BitVec 32) (bvsub (_ bv5 32) ref!9636)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!9930 () (_ BitVec 1) (ite (= ref!9924 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!9960 () (_ BitVec 32) (bvsub (_ bv6 32) ref!9636)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!9966 () (_ BitVec 1) (ite (= ref!9960 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!9996 () (_ BitVec 32) (bvsub (_ bv7 32) ref!9636)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!10002 () (_ BitVec 1) (ite (= ref!9996 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!10032 () (_ BitVec 32) (bvsub (_ bv8 32) ref!9636)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!10038 () (_ BitVec 1) (ite (= ref!10032 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!10068 () (_ BitVec 32) (bvsub (_ bv9 32) ref!9636)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!10074 () (_ BitVec 1) (ite (= ref!10068 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!10104 () (_ BitVec 32) (bvsub (_ bv10 32) ref!9636)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!10110 () (_ BitVec 1) (ite (= ref!10104 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!10140 () (_ BitVec 32) (bvsub (_ bv11 32) ref!9636)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!10146 () (_ BitVec 1) (ite (= ref!10140 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!10176 () (_ BitVec 32) (bvsub (_ bv12 32) ref!9636)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!10182 () (_ BitVec 1) (ite (= ref!10176 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!10212 () (_ BitVec 32) (bvsub (_ bv13 32) ref!9636)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!10218 () (_ BitVec 1) (ite (= ref!10212 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!10248 () (_ BitVec 32) (bvsub (_ bv14 32) ref!9636)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!10254 () (_ BitVec 1) (ite (= ref!10248 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!10284 () (_ BitVec 32) (bvsub (_ bv15 32) ref!9636)) ; CMP operation - 0x7f345aadd3cd: cmp ebx, esi
(define-fun ref!10290 () (_ BitVec 1) (ite (= ref!10284 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f345aadd3cd: cmp ebx, esi
(assert (not (= ref!4461 (_ bv1 1))))
(assert (not (= ref!4470 (_ bv1 1))))
(assert (not (= ref!4479 (_ bv1 1))))
(assert (not (= ref!4488 (_ bv1 1))))
(assert (not (= ref!4497 (_ bv1 1))))
(assert (not (= ref!4506 (_ bv1 1))))
(assert (= (bvor ref!4514 ref!4518) (_ bv1 1)))
(assert (not (= ref!4562 (_ bv1 1))))
(assert (= (bvor ref!4570 ref!4574) (_ bv1 1)))
(assert (not (= ref!4695 (_ bv1 1))))
(assert (not (= ref!4704 (_ bv1 1))))
(assert (not (= ref!4713 (_ bv1 1))))
(assert (not (= ref!4722 (_ bv1 1))))
(assert (not (= ref!4731 (_ bv1 1))))
(assert (not (= ref!4740 (_ bv1 1))))
(assert (= (bvor ref!4748 ref!4752) (_ bv1 1)))
(assert (not (= ref!4796 (_ bv1 1))))
(assert (= (bvor ref!4804 ref!4808) (_ bv1 1)))
(assert (not (= ref!5222 (_ bv0 1))))
(assert (not (= (bvand (bvnot ref!5381) (bvnot ref!5385)) (_ bv1 1))))
(assert (not (= ref!5396 (_ bv1 1))))
(assert (not (= (bvand (bvnot ref!5427) (bvnot ref!5431)) (_ bv1 1))))
(assert (not (= (bvand (bvnot ref!5561) (bvnot ref!5565)) (_ bv1 1))))
(assert (not (= (bvand (bvnot ref!5660) (bvnot ref!5664)) (_ bv1 1))))
(assert (not (= ref!5826 (_ bv1 1))))
(assert (= ref!5836 (_ bv0 1)))
(assert (not (= (bvand (bvnot ref!5848) (bvnot ref!5852)) (_ bv1 1))))
(assert (not (= (bvand (bvnot ref!5857) (bvnot ref!5861)) (_ bv1 1))))
(assert (= ref!5882 (_ bv1 1)))
(assert (not (= (bvand (bvnot ref!6322) (bvnot ref!6326)) (_ bv1 1))))
(assert (not (= (bvand (bvnot ref!6452) (bvnot ref!6456)) (_ bv1 1))))
(assert (not (= (bvor (bvxor ref!6659 ref!6657) ref!6660) (_ bv1 1))))
(assert (not (= (bvor (bvxor ref!6742 ref!6740) ref!6743) (_ bv1 1))))
(assert (= (bvor (bvxor ref!6825 ref!6823) ref!6826) (_ bv1 1)))
(assert (not (= (bvand (bvnot ref!6862) (bvnot ref!6866)) (_ bv1 1))))
(assert (bvuge (bvadd ref!6949 (_ bv16 64)) (_ bv6340056 64)))
(assert (bvule (bvadd ref!6949 (_ bv16 64)) (_ bv6340452 64)))
(assert (not (= ref!6964 (_ bv0 1))))
(assert (not (= ref!7073 (_ bv1 1))))
(assert (not (= (bvand (bvnot ref!7146) (bvnot ref!7150)) (_ bv1 1))))
(assert (not (= (bvand (bvnot ref!7285) (bvnot ref!7289)) (_ bv1 1))))
(assert (= ref!7300 (_ bv1 1)))
(assert (not (= ref!7350 (_ bv1 1))))
(assert (= ref!7388 (_ bv0 1)))
(assert (not (= ref!7424 (_ bv0 1))))
(assert (not (= ref!7522 (_ bv1 1))))
(assert (not (= (bvand (bvnot ref!7606) (bvnot ref!7610)) (_ bv1 1))))
(assert (not (= (bvand (bvnot ref!7745) (bvnot ref!7749)) (_ bv1 1))))
(assert (= ref!7760 (_ bv1 1)))
(assert (not (= ref!7812 (_ bv1 1))))
(assert (= ref!7850 (_ bv0 1)))
(assert (not (= ref!7886 (_ bv0 1))))
(assert (not (= ref!7984 (_ bv1 1))))
(assert (not (= (bvand (bvnot ref!8068) (bvnot ref!8072)) (_ bv1 1))))
(assert (not (= (bvand (bvnot ref!8207) (bvnot ref!8211)) (_ bv1 1))))
(assert (= ref!8222 (_ bv1 1)))
(assert (not (= ref!8274 (_ bv1 1))))
(assert (= ref!8312 (_ bv0 1)))
(assert (not (= ref!8348 (_ bv0 1))))
(assert (not (= (bvand (bvnot ref!8392) (bvnot ref!8396)) (_ bv1 1))))
(assert (not (= (bvand (bvnot ref!8575) (bvnot ref!8579)) (_ bv1 1))))
(assert (= ref!8731 (_ bv0 1)))
(assert (= ref!8788 (_ bv0 1)))
(assert (= ref!8845 (_ bv0 1)))
(assert (not (= ref!8902 (_ bv0 1))))
(assert (not (= (bvand (bvnot ref!8928) (bvnot ref!8932)) (_ bv1 1))))
(assert (not (= (bvand (bvnot ref!9325) (bvnot ref!9329)) (_ bv1 1))))
(assert (not (= ref!9469 (_ bv1 1))))
(assert (not (= (bvand (bvnot ref!9542) (bvnot ref!9546)) (_ bv1 1))))
(assert (not (= (bvand (bvnot ref!9681) (bvnot ref!9685)) (_ bv1 1))))
(assert (= ref!9696 (_ bv1 1)))
(assert (not (= ref!9748 (_ bv1 1))))
(assert (= ref!9786 (_ bv0 1)))
(assert (= ref!9822 (_ bv0 1)))
(assert (= ref!9858 (_ bv0 1)))
(assert (= ref!9894 (_ bv0 1)))
(assert (= ref!9930 (_ bv0 1)))
(assert (= ref!9966 (_ bv0 1)))
(assert (= ref!10002 (_ bv0 1)))
(assert (= ref!10038 (_ bv0 1)))
(assert (= ref!10074 (_ bv0 1)))
(assert (= ref!10110 (_ bv0 1)))
(assert (= ref!10146 (_ bv0 1)))
(assert (= ref!10182 (_ bv0 1)))
(assert (= ref!10218 (_ bv0 1)))
(assert (= ref!10254 (_ bv0 1)))
(assert (not (= ref!10290 (_ bv0 1))))
(check-sat)
(exit)
